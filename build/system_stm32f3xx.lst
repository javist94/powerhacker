ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"system_stm32f3xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	1
  19              		.global	SystemInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	SystemInit:
  27              	.LFB130:
  28              		.file 1 "Core/Src/system_stm32f3xx.c"
   1:Core/Src/system_stm32f3xx.c **** /**
   2:Core/Src/system_stm32f3xx.c ****   ******************************************************************************
   3:Core/Src/system_stm32f3xx.c ****   * @file    system_stm32f3xx.c
   4:Core/Src/system_stm32f3xx.c ****   * @author  MCD Application Team
   5:Core/Src/system_stm32f3xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   6:Core/Src/system_stm32f3xx.c ****   *
   7:Core/Src/system_stm32f3xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:Core/Src/system_stm32f3xx.c ****   *    user application:
   9:Core/Src/system_stm32f3xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Core/Src/system_stm32f3xx.c ****   *                      before branch to main program. This call is made inside
  11:Core/Src/system_stm32f3xx.c ****   *                      the "startup_stm32f3xx.s" file.
  12:Core/Src/system_stm32f3xx.c ****   *
  13:Core/Src/system_stm32f3xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Core/Src/system_stm32f3xx.c ****   *                                  by the user application to setup the SysTick
  15:Core/Src/system_stm32f3xx.c ****   *                                  timer or configure other parameters.
  16:Core/Src/system_stm32f3xx.c ****   *
  17:Core/Src/system_stm32f3xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Core/Src/system_stm32f3xx.c ****   *                                 be called whenever the core clock is changed
  19:Core/Src/system_stm32f3xx.c ****   *                                 during program execution.
  20:Core/Src/system_stm32f3xx.c ****   *
  21:Core/Src/system_stm32f3xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:Core/Src/system_stm32f3xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f3xx.s" file, to
  23:Core/Src/system_stm32f3xx.c ****   *    configure the system clock before to branch to main program.
  24:Core/Src/system_stm32f3xx.c ****   *
  25:Core/Src/system_stm32f3xx.c ****   * 3. This file configures the system clock as follows:
  26:Core/Src/system_stm32f3xx.c ****   *=============================================================================
  27:Core/Src/system_stm32f3xx.c ****   *                         Supported STM32F3xx device
  28:Core/Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  29:Core/Src/system_stm32f3xx.c ****   *        System Clock source                    | HSI
  30:Core/Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 2


  31:Core/Src/system_stm32f3xx.c ****   *        SYSCLK(Hz)                             | 8000000
  32:Core/Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  33:Core/Src/system_stm32f3xx.c ****   *        HCLK(Hz)                               | 8000000
  34:Core/Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  35:Core/Src/system_stm32f3xx.c ****   *        AHB Prescaler                          | 1
  36:Core/Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  37:Core/Src/system_stm32f3xx.c ****   *        APB2 Prescaler                         | 1
  38:Core/Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  39:Core/Src/system_stm32f3xx.c ****   *        APB1 Prescaler                         | 1
  40:Core/Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  41:Core/Src/system_stm32f3xx.c ****   *        USB Clock                              | DISABLE
  42:Core/Src/system_stm32f3xx.c ****   *-----------------------------------------------------------------------------
  43:Core/Src/system_stm32f3xx.c ****   *=============================================================================
  44:Core/Src/system_stm32f3xx.c ****   ******************************************************************************
  45:Core/Src/system_stm32f3xx.c ****   * @attention
  46:Core/Src/system_stm32f3xx.c ****   *
  47:Core/Src/system_stm32f3xx.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  48:Core/Src/system_stm32f3xx.c ****   * All rights reserved.</center></h2>
  49:Core/Src/system_stm32f3xx.c ****   *
  50:Core/Src/system_stm32f3xx.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  51:Core/Src/system_stm32f3xx.c ****   * the "License"; You may not use this file except in compliance with the
  52:Core/Src/system_stm32f3xx.c ****   * License. You may obtain a copy of the License at:
  53:Core/Src/system_stm32f3xx.c ****   *                        opensource.org/licenses/BSD-3-Clause
  54:Core/Src/system_stm32f3xx.c ****   *
  55:Core/Src/system_stm32f3xx.c ****   ******************************************************************************
  56:Core/Src/system_stm32f3xx.c ****   */
  57:Core/Src/system_stm32f3xx.c **** 
  58:Core/Src/system_stm32f3xx.c **** /** @addtogroup CMSIS
  59:Core/Src/system_stm32f3xx.c ****   * @{
  60:Core/Src/system_stm32f3xx.c ****   */
  61:Core/Src/system_stm32f3xx.c **** 
  62:Core/Src/system_stm32f3xx.c **** /** @addtogroup stm32f3xx_system
  63:Core/Src/system_stm32f3xx.c ****   * @{
  64:Core/Src/system_stm32f3xx.c ****   */
  65:Core/Src/system_stm32f3xx.c **** 
  66:Core/Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Includes
  67:Core/Src/system_stm32f3xx.c ****   * @{
  68:Core/Src/system_stm32f3xx.c ****   */
  69:Core/Src/system_stm32f3xx.c **** 
  70:Core/Src/system_stm32f3xx.c **** #include "stm32f3xx.h"
  71:Core/Src/system_stm32f3xx.c **** 
  72:Core/Src/system_stm32f3xx.c **** /**
  73:Core/Src/system_stm32f3xx.c ****   * @}
  74:Core/Src/system_stm32f3xx.c ****   */
  75:Core/Src/system_stm32f3xx.c **** 
  76:Core/Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_TypesDefinitions
  77:Core/Src/system_stm32f3xx.c ****   * @{
  78:Core/Src/system_stm32f3xx.c ****   */
  79:Core/Src/system_stm32f3xx.c **** 
  80:Core/Src/system_stm32f3xx.c **** /**
  81:Core/Src/system_stm32f3xx.c ****   * @}
  82:Core/Src/system_stm32f3xx.c ****   */
  83:Core/Src/system_stm32f3xx.c **** 
  84:Core/Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Defines
  85:Core/Src/system_stm32f3xx.c ****   * @{
  86:Core/Src/system_stm32f3xx.c ****   */
  87:Core/Src/system_stm32f3xx.c **** #if !defined  (HSE_VALUE) 
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 3


  88:Core/Src/system_stm32f3xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
  89:Core/Src/system_stm32f3xx.c ****                                                 This value can be provided and adapted by the user 
  90:Core/Src/system_stm32f3xx.c **** #endif /* HSE_VALUE */
  91:Core/Src/system_stm32f3xx.c **** 
  92:Core/Src/system_stm32f3xx.c **** #if !defined  (HSI_VALUE)
  93:Core/Src/system_stm32f3xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
  94:Core/Src/system_stm32f3xx.c ****                                                 This value can be provided and adapted by the user 
  95:Core/Src/system_stm32f3xx.c **** #endif /* HSI_VALUE */
  96:Core/Src/system_stm32f3xx.c **** 
  97:Core/Src/system_stm32f3xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
  98:Core/Src/system_stm32f3xx.c ****      Internal SRAM. */
  99:Core/Src/system_stm32f3xx.c **** /* #define VECT_TAB_SRAM */
 100:Core/Src/system_stm32f3xx.c **** #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field.
 101:Core/Src/system_stm32f3xx.c ****                                   This value must be a multiple of 0x200. */
 102:Core/Src/system_stm32f3xx.c **** /**
 103:Core/Src/system_stm32f3xx.c ****   * @}
 104:Core/Src/system_stm32f3xx.c ****   */
 105:Core/Src/system_stm32f3xx.c **** 
 106:Core/Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Macros
 107:Core/Src/system_stm32f3xx.c ****   * @{
 108:Core/Src/system_stm32f3xx.c ****   */
 109:Core/Src/system_stm32f3xx.c **** 
 110:Core/Src/system_stm32f3xx.c **** /**
 111:Core/Src/system_stm32f3xx.c ****   * @}
 112:Core/Src/system_stm32f3xx.c ****   */
 113:Core/Src/system_stm32f3xx.c **** 
 114:Core/Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Variables
 115:Core/Src/system_stm32f3xx.c ****   * @{
 116:Core/Src/system_stm32f3xx.c ****   */
 117:Core/Src/system_stm32f3xx.c ****   /* This variable is updated in three ways:
 118:Core/Src/system_stm32f3xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 119:Core/Src/system_stm32f3xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 120:Core/Src/system_stm32f3xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 121:Core/Src/system_stm32f3xx.c ****          Note: If you use this function to configure the system clock there is no need to
 122:Core/Src/system_stm32f3xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is 
 123:Core/Src/system_stm32f3xx.c ****                updated automatically.
 124:Core/Src/system_stm32f3xx.c ****   */
 125:Core/Src/system_stm32f3xx.c **** uint32_t SystemCoreClock = 8000000;
 126:Core/Src/system_stm32f3xx.c **** 
 127:Core/Src/system_stm32f3xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 128:Core/Src/system_stm32f3xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
 129:Core/Src/system_stm32f3xx.c **** 
 130:Core/Src/system_stm32f3xx.c **** /**
 131:Core/Src/system_stm32f3xx.c ****   * @}
 132:Core/Src/system_stm32f3xx.c ****   */
 133:Core/Src/system_stm32f3xx.c **** 
 134:Core/Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_FunctionPrototypes
 135:Core/Src/system_stm32f3xx.c ****   * @{
 136:Core/Src/system_stm32f3xx.c ****   */
 137:Core/Src/system_stm32f3xx.c **** 
 138:Core/Src/system_stm32f3xx.c **** /**
 139:Core/Src/system_stm32f3xx.c ****   * @}
 140:Core/Src/system_stm32f3xx.c ****   */
 141:Core/Src/system_stm32f3xx.c **** 
 142:Core/Src/system_stm32f3xx.c **** /** @addtogroup STM32F3xx_System_Private_Functions
 143:Core/Src/system_stm32f3xx.c ****   * @{
 144:Core/Src/system_stm32f3xx.c ****   */
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 4


 145:Core/Src/system_stm32f3xx.c **** 
 146:Core/Src/system_stm32f3xx.c **** /**
 147:Core/Src/system_stm32f3xx.c ****   * @brief  Setup the microcontroller system
 148:Core/Src/system_stm32f3xx.c ****   * @param  None
 149:Core/Src/system_stm32f3xx.c ****   * @retval None
 150:Core/Src/system_stm32f3xx.c ****   */
 151:Core/Src/system_stm32f3xx.c **** void SystemInit(void)
 152:Core/Src/system_stm32f3xx.c **** {
  29              		.loc 1 152 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 153:Core/Src/system_stm32f3xx.c **** /* FPU settings --------------------------------------------------------------*/
 154:Core/Src/system_stm32f3xx.c **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 155:Core/Src/system_stm32f3xx.c ****   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  34              		.loc 1 155 3 view .LVU1
  35              		.loc 1 155 14 is_stmt 0 view .LVU2
  36 0000 054B     		ldr	r3, .L2
  37 0002 D3F88820 		ldr	r2, [r3, #136]
  38 0006 42F47002 		orr	r2, r2, #15728640
  39 000a C3F88820 		str	r2, [r3, #136]
 156:Core/Src/system_stm32f3xx.c **** #endif
 157:Core/Src/system_stm32f3xx.c **** 
 158:Core/Src/system_stm32f3xx.c **** #ifdef VECT_TAB_SRAM
 159:Core/Src/system_stm32f3xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 160:Core/Src/system_stm32f3xx.c **** #else
 161:Core/Src/system_stm32f3xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  40              		.loc 1 161 3 is_stmt 1 view .LVU3
  41              		.loc 1 161 13 is_stmt 0 view .LVU4
  42 000e 4FF00062 		mov	r2, #134217728
  43 0012 9A60     		str	r2, [r3, #8]
 162:Core/Src/system_stm32f3xx.c **** #endif
 163:Core/Src/system_stm32f3xx.c **** }
  44              		.loc 1 163 1 view .LVU5
  45 0014 7047     		bx	lr
  46              	.L3:
  47 0016 00BF     		.align	2
  48              	.L2:
  49 0018 00ED00E0 		.word	-536810240
  50              		.cfi_endproc
  51              	.LFE130:
  53              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  54              		.align	1
  55              		.global	SystemCoreClockUpdate
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	SystemCoreClockUpdate:
  62              	.LFB131:
 164:Core/Src/system_stm32f3xx.c **** 
 165:Core/Src/system_stm32f3xx.c **** /**
 166:Core/Src/system_stm32f3xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 167:Core/Src/system_stm32f3xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 168:Core/Src/system_stm32f3xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 169:Core/Src/system_stm32f3xx.c ****   *         other parameters.
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 5


 170:Core/Src/system_stm32f3xx.c ****   *
 171:Core/Src/system_stm32f3xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 172:Core/Src/system_stm32f3xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 173:Core/Src/system_stm32f3xx.c ****   *         based on this variable will be incorrect.
 174:Core/Src/system_stm32f3xx.c ****   *
 175:Core/Src/system_stm32f3xx.c ****   * @note   - The system frequency computed by this function is not the real
 176:Core/Src/system_stm32f3xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 177:Core/Src/system_stm32f3xx.c ****   *           constant and the selected clock source:
 178:Core/Src/system_stm32f3xx.c ****   *
 179:Core/Src/system_stm32f3xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 180:Core/Src/system_stm32f3xx.c ****   *
 181:Core/Src/system_stm32f3xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 182:Core/Src/system_stm32f3xx.c ****   *
 183:Core/Src/system_stm32f3xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 184:Core/Src/system_stm32f3xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 185:Core/Src/system_stm32f3xx.c ****   *
 186:Core/Src/system_stm32f3xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f3xx_hal.h file (default value
 187:Core/Src/system_stm32f3xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 188:Core/Src/system_stm32f3xx.c ****   *             in voltage and temperature.
 189:Core/Src/system_stm32f3xx.c ****   *
 190:Core/Src/system_stm32f3xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f3xx_hal.h file (default value
 191:Core/Src/system_stm32f3xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 192:Core/Src/system_stm32f3xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 193:Core/Src/system_stm32f3xx.c ****   *              have wrong result.
 194:Core/Src/system_stm32f3xx.c ****   *
 195:Core/Src/system_stm32f3xx.c ****   *         - The result of this function could be not correct when using fractional
 196:Core/Src/system_stm32f3xx.c ****   *           value for HSE crystal.
 197:Core/Src/system_stm32f3xx.c ****   *
 198:Core/Src/system_stm32f3xx.c ****   * @param  None
 199:Core/Src/system_stm32f3xx.c ****   * @retval None
 200:Core/Src/system_stm32f3xx.c ****   */
 201:Core/Src/system_stm32f3xx.c **** void SystemCoreClockUpdate (void)
 202:Core/Src/system_stm32f3xx.c **** {
  63              		.loc 1 202 1 is_stmt 1 view -0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
 203:Core/Src/system_stm32f3xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
  68              		.loc 1 203 3 view .LVU7
  69              	.LVL0:
 204:Core/Src/system_stm32f3xx.c **** 
 205:Core/Src/system_stm32f3xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 206:Core/Src/system_stm32f3xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
  70              		.loc 1 206 3 view .LVU8
  71              		.loc 1 206 12 is_stmt 0 view .LVU9
  72 0000 1D4B     		ldr	r3, .L11
  73 0002 5B68     		ldr	r3, [r3, #4]
  74              		.loc 1 206 7 view .LVU10
  75 0004 03F00C03 		and	r3, r3, #12
  76              	.LVL1:
 207:Core/Src/system_stm32f3xx.c **** 
 208:Core/Src/system_stm32f3xx.c ****   switch (tmp)
  77              		.loc 1 208 3 is_stmt 1 view .LVU11
  78 0008 042B     		cmp	r3, #4
  79 000a 14D0     		beq	.L5
  80 000c 082B     		cmp	r3, #8
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 6


  81 000e 16D0     		beq	.L6
  82 0010 1BB1     		cbz	r3, .L10
 209:Core/Src/system_stm32f3xx.c ****   {
 210:Core/Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 211:Core/Src/system_stm32f3xx.c ****       SystemCoreClock = HSI_VALUE;
 212:Core/Src/system_stm32f3xx.c ****       break;
 213:Core/Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 214:Core/Src/system_stm32f3xx.c ****       SystemCoreClock = HSE_VALUE;
 215:Core/Src/system_stm32f3xx.c ****       break;
 216:Core/Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 217:Core/Src/system_stm32f3xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 218:Core/Src/system_stm32f3xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 219:Core/Src/system_stm32f3xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 220:Core/Src/system_stm32f3xx.c ****       pllmull = ( pllmull >> 18) + 2;
 221:Core/Src/system_stm32f3xx.c **** 
 222:Core/Src/system_stm32f3xx.c **** #if defined (STM32F302xE) || defined (STM32F303xE) || defined (STM32F398xx)
 223:Core/Src/system_stm32f3xx.c ****         predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 224:Core/Src/system_stm32f3xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 225:Core/Src/system_stm32f3xx.c ****       {
 226:Core/Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 227:Core/Src/system_stm32f3xx.c ****         SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 228:Core/Src/system_stm32f3xx.c ****       }
 229:Core/Src/system_stm32f3xx.c ****       else
 230:Core/Src/system_stm32f3xx.c ****       {
 231:Core/Src/system_stm32f3xx.c ****         /* HSI oscillator clock selected as PREDIV1 clock entry */
 232:Core/Src/system_stm32f3xx.c ****         SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
 233:Core/Src/system_stm32f3xx.c ****       }
 234:Core/Src/system_stm32f3xx.c **** #else      
 235:Core/Src/system_stm32f3xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 236:Core/Src/system_stm32f3xx.c ****       {
 237:Core/Src/system_stm32f3xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 238:Core/Src/system_stm32f3xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 239:Core/Src/system_stm32f3xx.c ****       }
 240:Core/Src/system_stm32f3xx.c ****       else
 241:Core/Src/system_stm32f3xx.c ****       {
 242:Core/Src/system_stm32f3xx.c ****         predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 243:Core/Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 244:Core/Src/system_stm32f3xx.c ****         SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 245:Core/Src/system_stm32f3xx.c ****       }
 246:Core/Src/system_stm32f3xx.c **** #endif /* STM32F302xE || STM32F303xE || STM32F398xx */
 247:Core/Src/system_stm32f3xx.c ****       break;
 248:Core/Src/system_stm32f3xx.c ****     default: /* HSI used as system clock */
 249:Core/Src/system_stm32f3xx.c ****       SystemCoreClock = HSI_VALUE;
  83              		.loc 1 249 7 view .LVU12
  84              		.loc 1 249 23 is_stmt 0 view .LVU13
  85 0012 1A4B     		ldr	r3, .L11+4
  86              	.LVL2:
  87              		.loc 1 249 23 view .LVU14
  88 0014 1A4A     		ldr	r2, .L11+8
  89 0016 1A60     		str	r2, [r3]
 250:Core/Src/system_stm32f3xx.c ****       break;
  90              		.loc 1 250 7 is_stmt 1 view .LVU15
  91 0018 02E0     		b	.L8
  92              	.LVL3:
  93              	.L10:
 211:Core/Src/system_stm32f3xx.c ****       break;
  94              		.loc 1 211 7 view .LVU16
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 7


 211:Core/Src/system_stm32f3xx.c ****       break;
  95              		.loc 1 211 23 is_stmt 0 view .LVU17
  96 001a 184B     		ldr	r3, .L11+4
  97              	.LVL4:
 211:Core/Src/system_stm32f3xx.c ****       break;
  98              		.loc 1 211 23 view .LVU18
  99 001c 184A     		ldr	r2, .L11+8
 100 001e 1A60     		str	r2, [r3]
 212:Core/Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 101              		.loc 1 212 7 is_stmt 1 view .LVU19
 102              	.LVL5:
 103              	.L8:
 251:Core/Src/system_stm32f3xx.c ****   }
 252:Core/Src/system_stm32f3xx.c ****   /* Compute HCLK clock frequency ----------------*/
 253:Core/Src/system_stm32f3xx.c ****   /* Get HCLK prescaler */
 254:Core/Src/system_stm32f3xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 104              		.loc 1 254 3 view .LVU20
 105              		.loc 1 254 28 is_stmt 0 view .LVU21
 106 0020 154B     		ldr	r3, .L11
 107 0022 5B68     		ldr	r3, [r3, #4]
 108              		.loc 1 254 52 view .LVU22
 109 0024 C3F30313 		ubfx	r3, r3, #4, #4
 110              		.loc 1 254 22 view .LVU23
 111 0028 164A     		ldr	r2, .L11+12
 112 002a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 113              	.LVL6:
 255:Core/Src/system_stm32f3xx.c ****   /* HCLK clock frequency */
 256:Core/Src/system_stm32f3xx.c ****   SystemCoreClock >>= tmp;
 114              		.loc 1 256 3 is_stmt 1 view .LVU24
 115              		.loc 1 256 19 is_stmt 0 view .LVU25
 116 002c 134A     		ldr	r2, .L11+4
 117 002e 1368     		ldr	r3, [r2]
 118 0030 CB40     		lsrs	r3, r3, r1
 119 0032 1360     		str	r3, [r2]
 257:Core/Src/system_stm32f3xx.c **** }
 120              		.loc 1 257 1 view .LVU26
 121 0034 7047     		bx	lr
 122              	.LVL7:
 123              	.L5:
 214:Core/Src/system_stm32f3xx.c ****       break;
 124              		.loc 1 214 7 is_stmt 1 view .LVU27
 214:Core/Src/system_stm32f3xx.c ****       break;
 125              		.loc 1 214 23 is_stmt 0 view .LVU28
 126 0036 114B     		ldr	r3, .L11+4
 127              	.LVL8:
 214:Core/Src/system_stm32f3xx.c ****       break;
 128              		.loc 1 214 23 view .LVU29
 129 0038 114A     		ldr	r2, .L11+8
 130 003a 1A60     		str	r2, [r3]
 215:Core/Src/system_stm32f3xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 131              		.loc 1 215 7 is_stmt 1 view .LVU30
 132 003c F0E7     		b	.L8
 133              	.LVL9:
 134              	.L6:
 218:Core/Src/system_stm32f3xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 135              		.loc 1 218 7 view .LVU31
 218:Core/Src/system_stm32f3xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 8


 136              		.loc 1 218 20 is_stmt 0 view .LVU32
 137 003e 0E4A     		ldr	r2, .L11
 138 0040 5368     		ldr	r3, [r2, #4]
 139              	.LVL10:
 219:Core/Src/system_stm32f3xx.c ****       pllmull = ( pllmull >> 18) + 2;
 140              		.loc 1 219 7 is_stmt 1 view .LVU33
 219:Core/Src/system_stm32f3xx.c ****       pllmull = ( pllmull >> 18) + 2;
 141              		.loc 1 219 22 is_stmt 0 view .LVU34
 142 0042 5268     		ldr	r2, [r2, #4]
 143              	.LVL11:
 220:Core/Src/system_stm32f3xx.c **** 
 144              		.loc 1 220 7 is_stmt 1 view .LVU35
 220:Core/Src/system_stm32f3xx.c **** 
 145              		.loc 1 220 27 is_stmt 0 view .LVU36
 146 0044 C3F38343 		ubfx	r3, r3, #18, #4
 147              	.LVL12:
 220:Core/Src/system_stm32f3xx.c **** 
 148              		.loc 1 220 15 view .LVU37
 149 0048 0233     		adds	r3, r3, #2
 150              	.LVL13:
 235:Core/Src/system_stm32f3xx.c ****       {
 151              		.loc 1 235 7 is_stmt 1 view .LVU38
 235:Core/Src/system_stm32f3xx.c ****       {
 152              		.loc 1 235 10 is_stmt 0 view .LVU39
 153 004a 12F4803F 		tst	r2, #65536
 154 004e 05D1     		bne	.L9
 238:Core/Src/system_stm32f3xx.c ****       }
 155              		.loc 1 238 9 is_stmt 1 view .LVU40
 238:Core/Src/system_stm32f3xx.c ****       }
 156              		.loc 1 238 44 is_stmt 0 view .LVU41
 157 0050 0D4A     		ldr	r2, .L11+16
 158              	.LVL14:
 238:Core/Src/system_stm32f3xx.c ****       }
 159              		.loc 1 238 44 view .LVU42
 160 0052 02FB03F3 		mul	r3, r2, r3
 161              	.LVL15:
 238:Core/Src/system_stm32f3xx.c ****       }
 162              		.loc 1 238 25 view .LVU43
 163 0056 094A     		ldr	r2, .L11+4
 164 0058 1360     		str	r3, [r2]
 165 005a E1E7     		b	.L8
 166              	.LVL16:
 167              	.L9:
 242:Core/Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 168              		.loc 1 242 9 is_stmt 1 view .LVU44
 242:Core/Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 169              		.loc 1 242 28 is_stmt 0 view .LVU45
 170 005c 064A     		ldr	r2, .L11
 171              	.LVL17:
 242:Core/Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 172              		.loc 1 242 28 view .LVU46
 173 005e D26A     		ldr	r2, [r2, #44]
 242:Core/Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 174              		.loc 1 242 36 view .LVU47
 175 0060 02F00F02 		and	r2, r2, #15
 242:Core/Src/system_stm32f3xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 176              		.loc 1 242 22 view .LVU48
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 9


 177 0064 0132     		adds	r2, r2, #1
 178              	.LVL18:
 244:Core/Src/system_stm32f3xx.c ****       }
 179              		.loc 1 244 9 is_stmt 1 view .LVU49
 244:Core/Src/system_stm32f3xx.c ****       }
 180              		.loc 1 244 38 is_stmt 0 view .LVU50
 181 0066 0649     		ldr	r1, .L11+8
 182 0068 B1FBF2F2 		udiv	r2, r1, r2
 183              	.LVL19:
 244:Core/Src/system_stm32f3xx.c ****       }
 184              		.loc 1 244 54 view .LVU51
 185 006c 03FB02F3 		mul	r3, r3, r2
 186              	.LVL20:
 244:Core/Src/system_stm32f3xx.c ****       }
 187              		.loc 1 244 25 view .LVU52
 188 0070 024A     		ldr	r2, .L11+4
 189 0072 1360     		str	r3, [r2]
 190 0074 D4E7     		b	.L8
 191              	.L12:
 192 0076 00BF     		.align	2
 193              	.L11:
 194 0078 00100240 		.word	1073876992
 195 007c 00000000 		.word	.LANCHOR0
 196 0080 00127A00 		.word	8000000
 197 0084 00000000 		.word	.LANCHOR1
 198 0088 00093D00 		.word	4000000
 199              		.cfi_endproc
 200              	.LFE131:
 202              		.global	APBPrescTable
 203              		.global	AHBPrescTable
 204              		.global	SystemCoreClock
 205              		.section	.data.SystemCoreClock,"aw"
 206              		.align	2
 207              		.set	.LANCHOR0,. + 0
 210              	SystemCoreClock:
 211 0000 00127A00 		.word	8000000
 212              		.section	.rodata.AHBPrescTable,"a"
 213              		.align	2
 214              		.set	.LANCHOR1,. + 0
 217              	AHBPrescTable:
 218 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\001\002\003\004\006"
 218      00000000 
 218      01020304 
 218      06
 219 000d 070809   		.ascii	"\007\010\011"
 220              		.section	.rodata.APBPrescTable,"a"
 221              		.align	2
 224              	APBPrescTable:
 225 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004"
 225      01020304 
 226              		.text
 227              	.Letext0:
 228              		.file 2 "/Users/javier/Library/xPacks/@xpack-dev-tools/arm-none-eabi-gcc/9.3.1-1.4.1/.content/arm-
 229              		.file 3 "/Users/javier/Library/xPacks/@xpack-dev-tools/arm-none-eabi-gcc/9.3.1-1.4.1/.content/arm-
 230              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 231              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 232              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f373xc.h"
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 10


 233              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f3xx.c
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:18     .text.SystemInit:0000000000000000 $t
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:26     .text.SystemInit:0000000000000000 SystemInit
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:49     .text.SystemInit:0000000000000018 $d
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:54     .text.SystemCoreClockUpdate:0000000000000000 $t
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:61     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:194    .text.SystemCoreClockUpdate:0000000000000078 $d
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:224    .rodata.APBPrescTable:0000000000000000 APBPrescTable
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:217    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:210    .data.SystemCoreClock:0000000000000000 SystemCoreClock
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:206    .data.SystemCoreClock:0000000000000000 $d
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:213    .rodata.AHBPrescTable:0000000000000000 $d
/var/folders/jw/jcj5j9_530958b2rm5vp9wn00000gn/T//ccnyVhCa.s:221    .rodata.APBPrescTable:0000000000000000 $d

NO UNDEFINED SYMBOLS
